<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context-4.0.xsd
                    http://www.springframework.org/schema/mvc  
                    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                    http://www.springframework.org/schema/task
    				http://www.springframework.org/schema/task/spring-task-4.0.xsd">

    <!--开启注解处理器 -->
    <context:annotation-config />

    <!-- 开启spring MVC元注解扫描 -->
    <context:component-scan base-package="com.playmatecat">
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController" />
        <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" /> -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    </context:component-scan>
    
    <!-- 支持异步方法执行 ,见spring @Async-->
    <task:annotation-driven /> 
    
    <!-- 通过注解，把一个URL映射到Controller“类”上 -->
    <bean class="com.playmatecat.spring.mvc.CatRequestMappingHandlerMapping">
        <!-- <property name="interceptors"> 多个拦截器,顺序执行 <ref bean="yourInterceptor" /> </property> -->
        <!-- <property name="interceptors">
        	<list>
        		<ref bean="shiroAuthUrlInterceptor"/>
        		<bean class="org.springframework.web.servlet.mvc.WebContentInterceptor"></bean>
        	</list>
        </property> -->
    </bean>
    <!-- 通过注解，把一个URL映射到Controller类的“方法”上 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />

    <!-- 拦截器链 -->
	<mvc:interceptors>
		<bean name="shiroAuthUrlInterceptor"
			class="com.playmatecat.shiro.interceptor.ShiroAuthUrlInterceptor">
			<property name="ignoreUriList">
			     <list>
			         <value>/static/**</value>
			         <value>/sub-sys/cas-login</value>
			     </list>
			</property>
		</bean>
	</mvc:interceptors>	
	



    <!-- 开启spring MVC映射,映射顺序为2 -->
    <mvc:annotation-driven />
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="2">
        <property name="prefix">
            <!-- controller层请求转发forward的根目录 -->
            <value>/WEB-INF/jsp/</value>
        </property>
        <property name="suffix">
            <!-- 设置映射文件类型 -->
            <value>.jsp</value>
        </property>
    </bean>
    
    
    <!-- shiro元注解支持相关bean(参考官方文档),如果有spring的mvc.xml就放在mvc中，否则放在application.xml中 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    
    
    <!-- spring对shiro鉴权未通过时异常捕捉,如果配置了spring MVC那么shiro鉴权未通过时抛出的是异常而不是http 403 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    	<!-- 注意此处的url地址实际是实际spring ModelAndView的mvc forward映射地址,不用单独再写controller去映射 -->
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常页面名作为值 -->
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">common/error/403</prop>
				<prop key="org.apache.shiro.authz.UnauthenticatedException">common/error/403</prop>
				<prop key="com.playmatecat.spring.exception.NotFoundPermException">common/error/403</prop>
				<prop key="com.playmatecat.spring.exception.NotFoundURIException">common/error/404</prop>
				<prop key="java.lang.NullPointerException">common/error/500</prop>
			</props>
		</property>
		<!-- 定义异常statusCode -->
		<property name="statusCodes">
			<props>
				<prop key="common/error/403">403</prop>
				<prop key="common/error/404">404</prop>
				<prop key="common/error/500">500</prop>
			</props>
		</property>
		
		<!-- 定义默认的异常处理页面 -->
		<property name="defaultErrorView">
			<value>common/error/500</value>
		</property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，如果不添加exceptionAttribute属性，则默认为exception -->
		<property name="exceptionAttribute" value="exception"/>
	</bean>
    

    <!-- 通过以下这段配置，才可以读取静态的css和js等资源文件 -->
    <mvc:default-servlet-handler />
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/images/**" location="/WEB-INF/images/" />
    <mvc:resources mapping="/static/css/**" location="/WEB-INF/css/" />
    <mvc:resources mapping="/static/js/**" location="/WEB-INF/js/" />
    <mvc:resources mapping="/static/lib/**" location="/WEB-INF/lib/" />

	<!-- 整合fastjson转换 -->
	<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
                <!-- <value>text/html;charset=UTF-8</value> -->
            </list>
		</property>
		<property name="features">
		<!-- DisableCheckSpecialChar：一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false 
        QuoteFieldNames———-输出key时是否使用双引号,默认为true 
        WriteMapNullValue——–是否输出值为null的字段,默认为false 
        WriteNullNumberAsZero—-数值字段如果为null,输出为0,而非null 
        WriteNullListAsEmpty—–List字段如果为null,输出为[],而非null 
        WriteNullStringAsEmpty—字符类型字段如果为null,输出为”“,而非null 
        WriteNullBooleanAsFalse–Boolean字段如果为null,输出为false,而非null -->
			<array>
				<value>WriteMapNullValue</value>
				<value>QuoteFieldNames</value>
<!-- 				<value>WriteNullNumberAsZero</value> -->
<!-- 				<value>WriteNullStringAsEmpty</value> -->
			</array>
		</property>
	</bean>

</beans>